// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/tui/views/shared.go (interfaces: ClientApp)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_client.go -package=mocks internal/infra/tui/views/shared.go ClientApp
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "keeper/internal/core/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientApp is a mock of ClientApp interface.
type MockClientApp struct {
	ctrl     *gomock.Controller
	recorder *MockClientAppMockRecorder
	isgomock struct{}
}

// MockClientAppMockRecorder is the mock recorder for MockClientApp.
type MockClientAppMockRecorder struct {
	mock *MockClientApp
}

// NewMockClientApp creates a new mock instance.
func NewMockClientApp(ctrl *gomock.Controller) *MockClientApp {
	mock := &MockClientApp{ctrl: ctrl}
	mock.recorder = &MockClientAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientApp) EXPECT() *MockClientAppMockRecorder {
	return m.recorder
}

// CreateFileSecret mocks base method.
func (m *MockClientApp) CreateFileSecret(name, fileName, note string, payload []byte) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSecret", name, fileName, note, payload)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSecret indicates an expected call of CreateFileSecret.
func (mr *MockClientAppMockRecorder) CreateFileSecret(name, fileName, note, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSecret", reflect.TypeOf((*MockClientApp)(nil).CreateFileSecret), name, fileName, note, payload)
}

// CreateSecret mocks base method.
func (m *MockClientApp) CreateSecret(secretType model.SecretType, name, note string, payload []byte) (*model.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", secretType, name, note, payload)
	ret0, _ := ret[0].(*model.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockClientAppMockRecorder) CreateSecret(secretType, name, note, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockClientApp)(nil).CreateSecret), secretType, name, note, payload)
}

// GetSecret mocks base method.
func (m *MockClientApp) GetSecret(secretID int64) (*model.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", secretID)
	ret0, _ := ret[0].(*model.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClientAppMockRecorder) GetSecret(secretID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClientApp)(nil).GetSecret), secretID)
}

// ListSecrets mocks base method.
func (m *MockClientApp) ListSecrets(secretName string) (*model.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", secretName)
	ret0, _ := ret[0].(*model.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockClientAppMockRecorder) ListSecrets(secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockClientApp)(nil).ListSecrets), secretName)
}

// UpdateSecret mocks base method.
func (m *MockClientApp) UpdateSecret(id int64, secretType model.SecretType, name, note string, payload []byte) (*model.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", id, secretType, name, note, payload)
	ret0, _ := ret[0].(*model.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockClientAppMockRecorder) UpdateSecret(id, secretType, name, note, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockClientApp)(nil).UpdateSecret), id, secretType, name, note, payload)
}
