// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: internal/proto/keeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Keeper_Login_FullMethodName        = "/proto.Keeper/Login"
	Keeper_SignUp_FullMethodName       = "/proto.Keeper/SignUp"
	Keeper_ListSecrets_FullMethodName  = "/proto.Keeper/ListSecrets"
	Keeper_GetSecret_FullMethodName    = "/proto.Keeper/GetSecret"
	Keeper_CreateSecret_FullMethodName = "/proto.Keeper/CreateSecret"
	Keeper_UpdateSecret_FullMethodName = "/proto.Keeper/UpdateSecret"
	Keeper_CreateFile_FullMethodName   = "/proto.Keeper/CreateFile"
)

// KeeperClient is the client API for Keeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperClient interface {
	// IAM
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*Token, error)
	// Secret
	ListSecrets(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetSecret(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*Secret, error)
	CreateSecret(ctx context.Context, in *SecretCreateRequest, opts ...grpc.CallOption) (*Secret, error)
	UpdateSecret(ctx context.Context, in *SecretUpdateRequest, opts ...grpc.CallOption) (*Secret, error)
	CreateFile(ctx context.Context, in *SecretFileCreateRequest, opts ...grpc.CallOption) (*SecretFileCreateResponse, error)
}

type keeperClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperClient(cc grpc.ClientConnInterface) KeeperClient {
	return &keeperClient{cc}
}

func (c *keeperClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Token)
	err := c.cc.Invoke(ctx, Keeper_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Token)
	err := c.cc.Invoke(ctx, Keeper_SignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) ListSecrets(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Keeper_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetSecret(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, Keeper_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) CreateSecret(ctx context.Context, in *SecretCreateRequest, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, Keeper_CreateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) UpdateSecret(ctx context.Context, in *SecretUpdateRequest, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, Keeper_UpdateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) CreateFile(ctx context.Context, in *SecretFileCreateRequest, opts ...grpc.CallOption) (*SecretFileCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretFileCreateResponse)
	err := c.cc.Invoke(ctx, Keeper_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeeperServer is the server API for Keeper service.
// All implementations must embed UnimplementedKeeperServer
// for forward compatibility.
type KeeperServer interface {
	// IAM
	Login(context.Context, *LoginRequest) (*Token, error)
	SignUp(context.Context, *SignUpRequest) (*Token, error)
	// Secret
	ListSecrets(context.Context, *ListRequest) (*ListResponse, error)
	GetSecret(context.Context, *SecretRequest) (*Secret, error)
	CreateSecret(context.Context, *SecretCreateRequest) (*Secret, error)
	UpdateSecret(context.Context, *SecretUpdateRequest) (*Secret, error)
	CreateFile(context.Context, *SecretFileCreateRequest) (*SecretFileCreateResponse, error)
	mustEmbedUnimplementedKeeperServer()
}

// UnimplementedKeeperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeeperServer struct{}

func (UnimplementedKeeperServer) Login(context.Context, *LoginRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedKeeperServer) SignUp(context.Context, *SignUpRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedKeeperServer) ListSecrets(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedKeeperServer) GetSecret(context.Context, *SecretRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedKeeperServer) CreateSecret(context.Context, *SecretCreateRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedKeeperServer) UpdateSecret(context.Context, *SecretUpdateRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedKeeperServer) CreateFile(context.Context, *SecretFileCreateRequest) (*SecretFileCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedKeeperServer) mustEmbedUnimplementedKeeperServer() {}
func (UnimplementedKeeperServer) testEmbeddedByValue()                {}

// UnsafeKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServer will
// result in compilation errors.
type UnsafeKeeperServer interface {
	mustEmbedUnimplementedKeeperServer()
}

func RegisterKeeperServer(s grpc.ServiceRegistrar, srv KeeperServer) {
	// If the following call pancis, it indicates UnimplementedKeeperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Keeper_ServiceDesc, srv)
}

func _Keeper_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).ListSecrets(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetSecret(ctx, req.(*SecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).CreateSecret(ctx, req.(*SecretCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).UpdateSecret(ctx, req.(*SecretUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretFileCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).CreateFile(ctx, req.(*SecretFileCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Keeper_ServiceDesc is the grpc.ServiceDesc for Keeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Keeper",
	HandlerType: (*KeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Keeper_Login_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Keeper_SignUp_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _Keeper_ListSecrets_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Keeper_GetSecret_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _Keeper_CreateSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _Keeper_UpdateSecret_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _Keeper_CreateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/keeper.proto",
}
